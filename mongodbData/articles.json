[{
  "_id": {
    "$oid": "5fda0c3200f925305008eb8e"
  },
  "cover": "\\uploads\\upload_0c859cfac01742f71b325f7c071bcd10.png",
  "title": "聊聊那些你参加过的网络安全大会",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 15,
  "content": {
    "articleArea0": "年关将至，回顾2020年举办的网络安全大会，仍是多点开花，并没有因为疫情而止步。都说精彩的网络安全大会往往是行业精英的聚合处，集聚前沿技术、高端话题，可谓是参会人员知识上的“饕餮盛宴”。本期话题我们来聊聊这些年你参加过的网安大会~欢迎大家积极分享自己的经验故事和观点立场，你有故事，我有CIS 2020极客票噢~",
    "articleArea1": "1、你参加过哪些国内外哪些网络安全大会？分享你印象最深的一次经历\r\n\r\n2、你认为国内外网安大会的最大区别是什么？角度不限\r\n\r\n3、疫情推动线上网安大会的形式创新，你更支持线上or线下？有何利弊？",
    "subtitle0": "观点回顾",
    "articleArea2": "1、国内多些，大型的ISC这三年都有去，专题型的工控安全、威胁情报，IBM之前也有些。技术型的上面也有聊到，Defcon group \r\n2、国外没参与过，简单写写国内外讲解专家特点不同，国外讲解ISC主论坛听的比较多的是安全事件、专项安全研究解读，会看到更多专家花了很多心思在某个安全领域，比如针对移动端安全威胁研究、物联网安全威胁研究、SIEM事件处置（这些会把技术、理论、理解联系起来）。国内想要到上面的级别要去看ISC分论坛，找某个领域去听听，忘了那一年，移动安全分论坛有人分享Android底层内核攻防，通过linux底层引导后，哪些文件可以作为入口，怎样构造脚本等。还有web安全分论坛长亭的攻防思路，以及webids基于att＆ck研究运用、未来结合自身产品方向运用。反而国内很多像咨询、服务、理论化的研究让人觉得比较平平，关注度也不够（这个原因，个人理解是东西过于理论或受众接受度问题）\r\n3、线下小型沙龙，线上大型综合论坛。创新我认为可以聚焦，在结合技术领域一些亮点后，如何在安全咨询、安全服务领域提供一些创新及亮点，这部分可以是理解，也可以是产品，但一定是严谨源于理论及实践结合，有些时候，经过思考及实践得出的看法、理解才是安全真正有价值的东西所在。",
    "subtitle1": "网空闲话",
    "articleArea3": "1.国内的网络安全行业的各种会议，早已偏离初心，被各种利益裹挟。或推理念，或推产品，或揽市场，客户。纯技术交流,分享已成配角。十年前的安全焦点峰会，印象较深\r\n\r\n2.在网络空间国家对抗竞争的大背景下，先进领先的攻防技术甚至产品，当属国家战略资源，不宜公开或出口。闭门讨论往往才是些价值\r\n\r\n3.真正的有效果有价值的沟通交流，还是线下的好。线上方式打折扣太多，效果和价值并不理想"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda0d3800f925305008eb8f"
  },
  "cover": "\\uploads\\upload_b48d59c002beefb8d69c666a015173c8.png",
  "title": "我是谁:没有不好玩的CTF",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 45,
  "content": {
    "articleArea0": "CTF（Capture The Flag，夺旗赛）CTF 的前身是传统黑客之间的网络技术比拼游戏，起源于 1996 年第四届 DEFCON，以代替之前黑客们通过互相发起真实攻击进行技术比拼的方式。 CTF是一种流行的信息安全竞赛形式，其英文名可直译为“夺得Flag”，也可意译为“夺旗赛”。",
    "subtitle0": "简介",
    "articleArea1": "本文主要介绍解题模式，分五类进行介绍，并且会针对不同类型分别进行举例分析，以及提供相对应下载地址，难度为入门级别，方便大家快速入门。",
    "subtitle1": "PWN",
    "articleArea2": "Pwn的题主要考察选手对于二进制漏洞的挖掘和利用能力，根据题目所给的二进制文件，进行逆向分析，找到相关漏洞，编写poc，即可获取flag，例如常见的堆栈溢出、格式化漏洞、整形漏洞等常见二进制漏洞。",
    "Img0": "\\uploads\\upload_22e43c259aca78650a4a7267320d6c3c.png"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda0dc500f925305008eb90"
  },
  "cover": "\\uploads\\upload_8db4cd9739f2c1978628cb80ac026254.png",
  "title": "JaFak：一款无视js前端加密的账号密码爆破工具",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 17,
  "content": {
    "articleArea0": "其实这文讲得重点不是工具的开发，而是一种思想：\r\n\r\n完全可以利用一些可自动化测试来帮助我们进行渗透测试任务\r\n\r\n为什么会想到写这个脚本？爱恨情仇加纠缠。\r\n\r\n在我的潜意识里，我只会在真正用的时候才会去找轮子，造轮子，所以这次的脚本也是因为一次实际的常规测试引发的一连串连锁反应，我称之为铁索连环！\r\n\r\n在一次授权的系统测试中，我发现了系统找回密码功能处有个很有趣的事情，找回密码进行验证的时候，需要输入用户名和相应绑定的邮箱，当我输入正确的用户名时候，系统会提示“用户名或邮箱错误”\r\n\r\n没毛病，模糊信息返回，但是当我输入正确的用户名和错误的邮箱时，系统会提示“输入邮箱错误”，相信各位大佬都知道了，这里挖掘到一枚用户名枚举的漏洞，通过系统的提示系统，批量爆破系统存在的用户名。\r\n\r\n但是，交过洞的大佬们都知道，除非是金融行业，或者其他很重要系统，一般是不会收这样的漏洞，收也是低位，恰巧我做的这个项目，不是那一类，所以没啥卵用。",
    "subtitle0": "差点劝退",
    "articleArea1": "所以我决定搞点事情，把这个洞危害加大，我第一个想的就是爆破固定的用户名与密码，因为系统的登录页面，无论是你用户名错误还是密码错误，都返回“用户名和密码或错误！”，且没有验证码验证，也不限制次数，又因为我们枚举了正确的用户名，这个提示相当于变成了“密码错误，请重新输入”，就可以爆破固定用户名的密码了，burp启动，直接就冲了！",
    "Img0": "\\uploads\\upload_fb2b2d37e991d426141d49362843cfdc.png",
    "articleArea2": "但是吧，我觉得难不倒我，我还可以抢救一下，因为我以前看过大佬，通过本地建立服务，去调用系统的js，然后为己用，但是也得找到加密函数的接口，bp上面就有插件，本地起服务，但是也得找到加密的入口函数！还是佩服那些前端调试硬刚的大佬，真是大佬！\r\n\r\n因为我以前见过国外的某性能测试软件，不知道啥名字了，反正挺贵的，能自动控制浏览器进行性能设置，就好比一个机器人帮你输入，帮你提交，帮你访问网站，我觉得酷死了，然后我就想了想咋实现的，想起自动化，我肯定第一时间想起了python，Google一搜还真有！"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda0e3a00f925305008eb91"
  },
  "cover": "\\uploads\\upload_62c8f51ddd9443bbdfd91cd0e325b64e.png",
  "title": "nginx实现网页缓存防篡改",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 1,
  "content": {
    "subtitle0": "简介",
    "articleArea0": "使用网站防篡改对指定的敏感页面设置缓存，缓存后即使源站页面内容被恶意篡改，WAF也会向访问者返回预先缓存好的页面内容，确保用户看到正确的页面。\r\n启用 网页防篡改、敏感信息防泄露开关，才能使用该功能。",
    "Img0": "\\uploads\\upload_3e8235dd072faf8e578d112a6b2b2949.png",
    "articleArea1": "填写精确的要防护的路径，可以防护该路径下的text、html和图片等内容。\r\n\r\n缓存用户配置的url的页面，到openresty。每次处理用户请求，从nginx缓存获取页面。 \r\n配置的url页面在nginx.conf--->http--->server--->local，local中设置缓存配置，根据自身业务特点设置缓存10~30天不等。\r\n若被保护的页面更新，手动触发更新缓存至最新的页面。\r\n即设置的url对应的页面，缓存中始终与real server对应的页面，保持同步，即使real server的页面被篡改。\r\n用户请求的页面来自于openresty缓存。\r\n经过大量测试发现：对缓存的过期与清除起作用的因素的优先级从高到低一次为：\r\ninactive配置项、源服务器设置的Expires、源服务器设置的Max-Age、proxy_cache_valid配置项"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda0ea600f925305008eb92"
  },
  "cover": "\\uploads\\upload_339cd6081a1d32071805b5b829af6c64.png",
  "title": "php反序列化漏洞入门 ",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 1,
  "content": {
    "subtitle0": "什么是序列化与反序列化？",
    "articleArea0": "（反）序列化给我们传递对象提供了一种简单的方法。serialize()将一个对象转换成一个字符串，unserialize()将字符串还原为一个对象，在PHP应用中，序列化和反序列化一般用做缓存，比如session缓存，cookie等。",
    "subtitle1": "序列化",
    "articleArea1": "序列化是将变量转换为可保存或传输的字符串的过程；在php中是使用serialize()方法实现将类进行序列化，下面是一段php序列化代码，可以通过注释理解代码含义。",
    "Img0": "\\uploads\\upload_ca5af15fe73b0f84fbf07b58e2cf844a.png"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda0f2600f925305008eb93"
  },
  "cover": "\\uploads\\upload_913738c2b2c7c0e0f21bfa7faacc1398.png",
  "title": "文件包含漏洞引发的安全思考",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 1,
  "content": {
    "subtitle0": "漏洞原理",
    "articleArea0": "文件包含漏洞是一个最常见的依赖于脚本运行而影响Web应用程序的漏洞。当应用程序使用攻击者控制的变量建立一个可执行代码的路径，容许攻击者控制在运行时执行哪个文件时，就会导致文件包含漏洞。程序开发人员通常会把可重复使用的函数写入单文件中，在使用这些函数时,程序开发人员直接调用此文件，而无需再次编写函数，这种调用文件的过程一般被称为文件包含。此外，程序开发人员都希望代码更加灵活，所以通常会被包含的文件设置为变量，用来进行动态调用。但正是由于这种灵活性，从而导致客服端可以调用恶意文件，导致文件包含漏洞.哈哈程序员又要背锅了。",
    "subtitle1": "分类",
    "articleArea1": "分为本地文件包含漏洞和远程文件包含漏洞远程文件包含(RFI):当web应用程序下载并执行远程文件时,会导致远程文件包含,这些远程文件通常以HTTP或FTPURL的形势获取,作为web应用程序的用户提供的参数.本地文件包含(LFI):本地文件包含类似于远程文件包含,本地包含仅能包括本地文件,即当前服务器上的文件以供执行",
    "subtitle2": "危害",
    "articleArea2": "web服务器的文件被外界浏览而导致信息泄露脚本被任意执行所造成的影响.典型的影响如下：\r\n\r\n篡改网站、执行非法操作、攻击其他网站(垫脚石)"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda0fae00f925305008eb94"
  },
  "cover": "\\uploads\\upload_e36890ed5997070cec8e1bb339771100.png",
  "title": "前端无秘密：看我如何策反JS为我所用",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 1,
  "content": {
    "articleArea0": "近日，参加金融行业某私测项目，随意选择某个业务办理，需要向客户发送短信验证码：",
    "subtitle0": "武器化利用",
    "articleArea1": "分析清楚漏洞详情，接下来一定是将手工利用转变为自动攻击，实现武器化，才能将战果最大化。\r\n\r\n武器化，我有两个选择：一是复用报文，对 PHONE_NO 参数加载手机号码字典，借助 python 的 requests 库，访问 /xx/api/xxxx/h5/xx/sChkBlPhone 接口获取 Data，调用前面已实现的解密脚本，批量获取用户信息；二是复用页面，驱动 webdriver，模拟人工操作，输入手机号、点击“获取验证码”按钮、抓包获取 Data、解密脚本，批量获取用户信息。粗略分析，前者运行高效、后者实现简单。选择一还是二呢？~( ´•︵•` )~，我都要！",
    "subtitle1": " 复用报文方式",
    "articleArea2": "我计划基于已有原始请求，用脚本不断填写新 PHONE_NO 参数后提交，获取不同用户的个人信息。要让这条路可行，必须具备两个前提，服务端未限制篡改参数、服务端未限制重放请求。",
    "Img0": "\\uploads\\upload_6b0a67784e4e981ccbaa85649e0c2612.png"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda103700f925305008eb95"
  },
  "cover": "\\uploads\\upload_b49279d31b678bc81a19fe0d0196f4be.png",
  "title": "前端无秘密：看我如何策反JS为我所用",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 1,
  "content": {
    "subtitle0": "手工分析",
    "articleArea0": "要分析前端，自然得打开浏览器的开发者工具。习惯性按下 F12 键，无反应，显然页面禁用 F12，没有调试环境，所有后续工作均无法开展，我得创造环境。",
    "subtitle1": "创造前端调试环境",
    "articleArea1": "虽然禁用 F12，但未禁用 shift-F5，它也能启用开发者工具，或者，页面也未禁用右键，我从元素审查菜单项同样进入开发者工具。前端采用 webpack 打包，通过开发者工具的 {} 简单美化：",
    "Img0": "\\uploads\\upload_def007a9457a5748651e35626b20f966.png",
    "articleArea2": "尝试删除该语句，看能否禁掉反调试。由于 JS 已被浏览器加载至内存，即便通过开发者工具删掉该语句，浏览器照样会执行它，所以，必须得在浏览器拿到 JS 前就将其删除，也就是说，得让服务端重新下发该 JS，拦截响应包，删除该语句后放行至浏览器。具体而言，JS 作为静态资源，优先从本地缓存中获取而非服务端，必须强制刷新页面（ctrl-shift-r），拦截返回 businessReservation.js 的响应包，搜索关键字 setTimeout(e, 100)，无果："
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda10b000f925305008eb96"
  },
  "cover": "\\uploads\\upload_e87b6c0c5af3cec24d63e6e2e7951d29.png",
  "title": "内网流量规避",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 0,
  "content": {
    "subtitle0": "IDS和IPS概述：",
    "articleArea0": "IDS（intrusion detection system）入侵检测系统，旁路检测设备，工作在网络层，并行接在内网所需防护设备的链路上，通过抓取流量分析数据包，匹配规则库检测到恶意数据进行报警处理。\r\n\r\nIPS（Intrusion-prevention system）入侵防御系统，可覆盖网络层和应用层，比IDS多了主动防御，阻断攻击的功能。",
    "Img0": "\\uploads\\upload_0d9cb6576fa88ffa6f58229b17557e17.png",
    "articleArea1": "知道IPS的工作原理之后，最直接的方法就是将自己的流量伪装或者隐藏自己的流量。那么如何实现呢？下面我们来介绍两种方法：",
    "articleArea2": "DNS beacon+CobaltStrike\r\n将数据通过dns隧道进行传输，基于udp，利用53端口，隐蔽性强。大多数防火墙和入侵检测设备对DNS流量是放行的，能有一定效果的绕过入侵检测设备和防火墙的检测。由于dns传输的过程会经过很多dns节点服务器，所以传输速度会相对较慢。"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda111c00f925305008eb97"
  },
  "cover": "\\uploads\\upload_5b9febc53079157d2fc2187824a3dd30.jpg",
  "title": "渗透测试流程及信息收集",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 0,
  "content": {
    "subtitle0": "什么是渗透测试？",
    "articleArea0": "WEB安全渗透测试可不是随便拿个工具扫一下就可以做的，你不仅需要了解业务还需要给出相应的解决方案。这也是渗透测试和入侵的最大区别，入侵可以不择手段地（甚至是具有破坏性的）拿到系统权限，而渗透测试则是出于保护系统的目的，更全面地找出测试对象的安全隐患。渗透测试的第一步就是信息收集，这也是渗透测试最重要的一步，全面的信息收集是对渗透测试的保障。下面我就渗透测试相关术语、渗透测试完整流程、信息收集，这三点总结了一些东西，希望可以给看到的朋友们一些帮助。",
    "subtitle1": "一、渗透测试相关术语：",
    "articleArea1": "1、肉鸡：被黑客入侵并被长期驻扎的计算机或服务器。可以随意控制，可以是任意系统的设备，对象可以是企业，个人，政府等等所有单位。\r\n\r\n2、抓鸡：利用使用量大的程序的漏洞，使用自动话方式获取肉鸡的行为。\r\n\r\n3、提权：操作系统低权限的账户将自己提升为管理员权限使用的方法。\r\n\r\n4、后门：黑客为了对主机进行长期的控制，在机器上种植的一段程序或留下的一个“入口”。\r\n\r\n5、跳板：使用肉鸡IP来实施攻击其他目标，以便更好的隐藏自己的身份信息。\r\n\r\n6、旁站入侵：即同服务器下的网站入侵，入侵之后可以通过提权目录等手段拿到目标网站的权限。\r\n\r\n7、C段入侵：即同C段下服务器入侵。如目标IP为192.168.180.253入侵192.168.180.*的任意一台机器，然后利用一些黑客工具嗅探获取在网络上传输的各种信息。",
    "Img0": "\\uploads\\upload_866a493012b7ff6f0666d314b96693a2.png"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fda117100f925305008eb98"
  },
  "cover": "\\uploads\\upload_067b814a0a848031e9ca6f8ef88af49d.png",
  "title": "小白从信息收集到企业内网的“入狱”之路",
  "author": {
    "$oid": "5fe2e47db07c173b1ca0ddc6"
  },
  "publishDate": "2020年12月16日",
  "views": 3,
  "content": {
    "subtitle0": "0x00 总要有个题目吧",
    "articleArea0": "为什么写这样的一篇文章呐，主要是想挣（pian）稿费，啊呸，说错了，主要是想用这篇文章回复问过我的一些初学者，以前我没得选，我现在想做个好人，什么呀，串场了。是想说即使现在技术可能还在初级阶段，但依旧可以仅仅通过信息收集的技巧撬开目标内网的大门。\r\n那是我的朋友某次闲聊到的，我们就叫他W吧。那时候W还是一个小白，不仅没钱还没技术，天天跟我说某某SRC上的大佬月入百万有多牛X，转眼就把最后一串韭菜撸完了。“卧槽！老子还没吃呢！”他咽下韭菜，喝了一口漓泉，“你听我讲嘛……”。\r\n那是差不多一年前了，朋友W盯着某厂众测，但是没啥漏洞，无意中在浏览某眼查的时候，发现它和某大厂的一个合资公司（我们叫它A厂吧），发现还很大，就决定看能不能捞到一个Self XSS。在A厂的官网http://www.xxbxx.com/上并没有什么实质性的收获，指纹扫描亦非特定cms；接着进行了资产的收集。通过子域名扫描获得了目标的子域名列表，而旁站扫描的结果有点多，都不属于A厂的资产，便暂时打消旁站的念头……为了行文方便，以下我就转述朋友A的经历\r\n0x01 GitHub上的突破——源码与数据库账号密码泄露",
    "Img0": "\\uploads\\upload_2db11f9a1ad42c67a99238fa14cbc123.png"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fec311d8826ac1a20202cc7"
  },
  "cover": "\\uploads\\upload_f5021b76c7b5421331ddb9a8b5952939.png",
  "title": "开源蜜罐T-Pot",
  "author": {
    "$oid": "5fe41ad98b47ba29304132fd"
  },
  "publishDate": "2020年12月30日",
  "views": 6,
  "content": {
    "articleArea0": "本次我们了解的是开源蜜罐，及其与商业蜜罐的对比。\r\n\r\n在国内外，许多的开源蜜罐为构建安全网络世界做出了重要贡献。根据对象类型的不同，又分为数据库蜜罐、Web蜜罐、服务蜜罐等。我们为大家列举了一些开源蜜罐。",
    "articleArea1": "",
    "Img1": "\\uploads\\upload_ddcb1aa2bce95229668597507c577efb.png",
    "articleArea2": "在各类蜜罐之中，T-Pot多蜜罐平台脱颖而出。那么，是什么让它独树一帜呢？让我们来了解一下 T-Pot多蜜罐平台。",
    "Img2": "\\uploads\\upload_479fc8ac912b4052a90b9c384c1bf50f.png",
    "articleArea3": "T-Pot基于linux的网络安装程序。蜜罐守护程序以及正在使用的其他支持组件已使用Docker进行集装箱化。这允许我们在同一网络接口上运行多个蜜罐守护进程，并将网络接口上捕获的流量重新路由到最合适的开源蜜罐，同时保持较小的占用空间并限制每个蜜罐在其自己的环境中。\r\n\r\n这是T-Pot多蜜罐平台的系统构架图，由此可见，T-Pot是多系统的一个整合。"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5fec3528559d223a0c95f4ba"
  },
  "cover": "\\uploads\\upload_a25305596c5c249bba91dbf2c15dc53e.png",
  "title": "DNSlog注入详细解析",
  "author": {
    "$oid": "5fe41ad98b47ba29304132fd"
  },
  "publishDate": "2020年12月30日",
  "views": 2,
  "content": {
    "subtitle0": "域名知识：",
    "articleArea0": "域名可以分为5级，从右向左解析，用 . 分割级别，低级别的域名要在高级别的域名中去解析，所以当security.gitw7c.dnslog.cn去gitw7c.dnslog.cn中去解析的时候，就会留下解析记录，通过获取前来解析的低级域名前缀来获取我们需要的信息\r\n由于每一级域名的长度只能为63个字符，所以在mysql中获取到超过63个字节的字符时，会被当作一个错误的域名，不会产生去解析的动作，所以gitw7c.dnslog.cn也不会收到解析的记录，所以我们就获取不到想要的信息了",
    "articleArea1": "域名里有一个规则，只能出现数字，字母，下划线；所以在获取到的信息中包含了其他特殊符号时，load_file就会认为是一个错误的域名，就不会去从网络中解析了。",
    "Img0": "\\uploads\\upload_622006edf4e9c4216c49082175511620.png",
    "subtitle1": "sql payload",
    "articleArea2": "当我在域名中拼接一个@符号时，就不会进行解析",
    "Img1": "\\uploads\\upload_9398c3ffa3c839a93cd451329e3c2ccd.png",
    "articleArea3": "我们在使用group_concat合并查询时，会自动使用 \",\" 连接我们查询到的每值，但是由于 , 在url中是不允许出现的，所以使用group查询到的值去解析时候，mysql就会认为这不是一个url地址，就不会出现解析的操作，所以就没法获取到值，"
  },
  "__v": 0
},{
  "_id": {
    "$oid": "5ff46394218c3c30808c06ec"
  },
  "cover": "\\uploads\\upload_d83362ddf0d93411e52ab2c27dd6ff48.png",
  "title": "挖洞经验 | 利用反馈功能漏洞劫持谷歌文档用户当前工作界面截图",
  "author": {
    "$oid": "5ff462dc218c3c30808c06eb"
  },
  "publishDate": "2021年1月5日",
  "views": 4,
  "content": {
    "Img0": "\\uploads\\upload_02064e3e20ceaab15e0603d4225a0e8b.png",
    "articleArea0": "本文中，作者利用谷歌的问题反馈机制功能，通过更改其中调用框架iframe的URL路径，可实现对用户当前谷歌文档（Google Docs）工作界面的间接劫持。一起来看看。",
    "subtitle0": "谷歌问题反馈发送功能",
    "articleArea1": "谷歌在其大部分应用产品中都有一个名叫“反馈发送”（ Send Feedback）的功能，用于用户在使用其产品过程中的问题反馈，该功能中设置了问题描述的截图添加选项。如下所示：",
    "Img1": "\\uploads\\upload_27bd57a2122ef395b6110d359b36cf62.png",
    "subtitle1": "漏洞发现",
    "articleArea2": "基于上述谷歌的“反馈发送”功能来看，假设我们在使用谷歌文档-Google Docs (https://docs.google.com/document)，可以从路径Help--> Send Feedback来打开“反馈发送”功能来提交一些使用问题。打开“反馈发送”功能后，我们可以看到，此时的谷歌文档会以Iframe方式，对你当前的谷歌文档工作区域部份进行截图。由于谷歌主站www.google.com和Google docs (docs.google.com) 分别属于不同的源，所以，这里“反馈发送”功能的截图渲染操作可能就涉及到了跨源（域）通信，当然，PostMessage机制在这里就派上用场了。大概的一个流程就是：Google Docs会通过postmessage机制把其当前的工作文档截图RGB颜色模式发送到谷歌主站www.google.com的iframe框架，其截图RGB颜色模式最终会被postmessage方法发到feedback.googleusercontent.com，然后以Base64编码send到主站www.google.com的iframe框架中去。\r\n\r\n最后，还得在其截图反馈中添加文字描述，点击“Submit Feedback”提交反馈后，postmessage方法会一并把图文发送到https://www.google.com。总体流程如下：",
    "articleArea3": "了解了上述的反馈发送功能后，我首先想在其中的沙箱域名feedback.googleusercontent.com测试一下XSS漏洞，我预想利用XSS漏洞去劫持其中传输的用来渲染RGB像素点的值，这样就可以间接窃取其截图。一开始我比较有把握觉得沙箱域名feedback.googleusercontent.com应该有XSS，在我朋友的帮助下，我们前后历时5天，但连XSS的影子都没发现，就快要放弃了。一周后，我在Twitter中看到了白帽filedescriptor之前发过的一个视频，视频是关于Intigriti XSS挑战赛的解题思路。"
  },
  "__v": 0
}]